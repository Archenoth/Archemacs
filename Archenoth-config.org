#+TITLE:My Emacs config
#+STARTUP: hidestars

Neat thing... You can use =org-mode= files as your Emacs
configuration...

Below is my Emacs configuration along with descriptions of what each
piece does:

* Header
In the header of the config... We want the file to include lexical
binding... This is because I am quite accustomed to a Common-Lisp
style of developing with =let= closures and have-at-you:
#+BEGIN_SRC emacs-lisp :tangle yes :eval no :padline no
  ;; -*- lexical-binding: t -*-
#+END_SRC

* Setting up
** Setting up the package manager
The package manager in Emacs is pretty sweet, but the default repos
are quite limited in their selection of packages... So instead, I add
a couple more repos. (I am sure almost everyone has this in their
configuration somewhere)
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Package Manager URLs
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
               ("marmalade" . "http://marmalade-repo.org/packages/")
               ("melpa" . "http://melpa.milkbox.net/packages/")))
#+END_SRC

And, just in case the package manager is not loaded by default:
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Just in case
  (package-initialize)
#+END_SRC

** Requiring prerequisites
Before we get too far, we want to require a couple of libraries...

First of all, we want to include TLS... This is for =erc-tls=, yes,
but I believe it will also be used for all other pieces of Emacs that
use SSL. (Like the package manager eventually.)
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; SSL Support (For ERC primarily)
  (require 'tls)
#+END_SRC

Again, because of my use of Common Lisp, I miss a few features in
ELISP, so I include this library to make up for it:

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; For the Common Lisp-ish stuff in here
  (require 'cl-lib)
#+END_SRC

* Package-less configuration
The following configuration does not require any external packages to
be loaded... That will come later in the eventual [[Package kook][package hook]].

** Hooks
Hooks! A few small tweaks to suit my work style.

#+BEGIN_SRC emacs-lisp :tangle yes :eval no
  ;;;; Hooks
#+END_SRC

First of all, I dislike having messy whitespace in the files I am
working with, so I am sure to delete trailing whitespace whenever I
save a file... (This might become a problem sometime down the line,
but so far everything is good.)

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

*** Flymake
Of course, there are a few modes that I like to have Flymake.
enabled on by default...
#+BEGIN_SRC emacs-lisp :tangle yes :eval no
  ;; Flymake
#+END_SRC

Of those, we have =perl-mode=:
#+BEGIN_SRC emacs-lisp :tangle yes :padline no
  (add-hook 'perl-mode-hook (lambda () (flymake-mode t)))
#+END_SRC

And =php-mode=:
#+BEGIN_SRC emacs-lisp :tangle yes :padline no
  (add-hook 'php-mode-hook (lambda () (flymake-mode t)))
#+END_SRC

** Yes and No questions
Having to type "yes" is annoying when I just want to do something
simple... So, I alias =yes-or-no-p= to the single-keystroke
equivalent:

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Making boolean question less annoying
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Style options
I don't care too much for the default appearance of Emacs... I
generally like to remove the toolbar at the top of the screen:

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Remove unsightly toolbar
  (tool-bar-mode 0)
#+END_SRC

And remove fringes when in a windowed mode... And since that is the
default when we start up Emacs:

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; And fringes until we want to explicitly enable them
  (fringe-mode 0)
#+END_SRC

* Package checker and installer
I wrote a little package checker and installer so that I would not
have to worry about manually installing packages I like to have by
default:
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; My little package checker and installer
  (defun check-packages (&rest packages)
    "Checks if the passed in packages are installed, and installs
  the ones that are not."
    (cl-loop for package in packages
             with refreshed = nil
             unless (package-installed-p package)
               unless refreshed
                 do (package-refresh-contents)
                 and do (setq refreshed t)
               end
             and do (package-install package)))
#+END_SRC

* Package hook
After the package manager and packages are initialized, I like to
run a hook called =package-config= that starts like so:
#+BEGIN_SRC emacs-lisp :tangle yes :eval no
  ;; Post-package-loading hook
  (defun package-config ()
#+END_SRC

** Making sure packages are installed
First line of business in this hook is to make sure that all of the
packages I like to have by default are installed... I do this using
the [[Package checker and installer][package checker]] above:
#+BEGIN_SRC elisp
  ;; Ensuring packages are installed
  (check-packages
   'multiple-cursors 'web-mode 'slime 'rsense
   'robe 'projectile 'powerline 'plsql 'php-mode 'paredit 'nurumacs
   'yasnippet 'markdown-mode+ 'magit 'lua-mode 'langtool
   'js2-refactor 'jedi 'htmlize 'helm-projectile 'helm-emmet
   'grizzl 'graphviz-dot-mode 'flymake-ruby 'flymake-jshint
   'flymake-easy 'flymake-csslint 'flycheck 'feature-mode
   'expand-region 'evil 'erefactor 'erc-nick-notify 'enh-ruby-mode
   'emmet-mode 'ecukes 'cucumber-goto-step 'cider 'base16-theme
   'apache-mode 'ace-jump-mode 'ac-slime 'ac-js2 'ac-emmet
   'edbi-minor-mode 'firecode-theme 'sauron)
#+END_SRC

** Sauron
#+BEGIN_SRC emacs-lisp :tangle yes :eval no
  ;; Supremely useful monitor -- Sauron
#+END_SRC

The all-seeing eye, Sauron is quite useful, though I want to add some
functionality to the modeline with it, so I make higher-priority
messages set a variable: =sauron-alert=:

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'sauron-event-added-functions
            (lambda (what priority message &optional event)
              (when (<= 4 priority)
                (setq sauron-alert t))))
#+END_SRC

And because I get notified of high-priority events normally, I have
no need for Sauron to be its own frame:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq sauron-separate-frame nil)
#+END_SRC

** Feature mode
#+BEGIN_SRC emacs-lisp :tangle yes :eval no
  ;; Feature mode
#+END_SRC

Since I work with [[http://cukes.info/][Cucumber]] feature files reasonably often, I find it
useful to be able to jump right to the definition of some cucumber
step I am looking at:
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'feature-mode-hook
            (lambda ()
              (local-set-key (kbd "C-s-r") 'jump-to-cucumber-step)))
#+END_SRC

** Markdown mode
#+BEGIN_SRC emacs-lisp :tangle yes :eval no
  ;; Markdown
#+END_SRC

As of the time of writing, I don't think markdown mode has it set
automagically start for files with the =.md= file extension, so:
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
#+END_SRC

** Package-loaded theme configuration
I have a bunch more visual configuration besides what is in the
[[Style options]] section.

It is all dependant on whether or not we are running in NOX or
not. This definition is kind of a monster:
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Base16-tomorrow and firecode themes, fullscreen, and
  ;; powerline... Bad in NOX though.
  (if (display-graphic-p)
      (let ((fullscreen-faces
             '((default ((t (:family "Source Code Pro" :foundry "adobe" :slant normal :weight normal :height 98 :width normal))))
               (fringe ((t (:background "#111" :width expanded))))
               (linum ((t (:inherit (shadow default) :background "#111" :foreground "#e0e0e0"))) t)
               (pe/directory-face ((t (:inherit dired-directory :weight normal :height 0.9))) t)
               (pe/file-face ((t (:inherit default :background "#111" :weight normal :height 0.9))) t)))
            (windowed-faces
             '((default ((t (:family "Inconsolata" :foundry "unknown" :slant normal :weight normal :height 98 :width normal))))
               (scroll-bar ((t nil)))
               (vertical-border ((nil (:foreground "#191919")))))))


        (defun set-default-window-size ()
          "Sets the default window size..."
          (interactive)
          (modify-frame-parameters
           (selected-frame)
           '((width . 80) (height . 34))))

        ;; Toggleable themes
        (defun set-fullscreen-theme ()
          "Sets the default theme I use for maximixed Emacs"
          (enable-theme 'firecode)
          (disable-theme 'base16-tomorrow-dark)
          (apply #'custom-set-faces fullscreen-faces)
          (fringe-mode '(20 . 0))
          (scroll-bar-mode -1)
          (menu-bar-mode -1))

        (defun set-window-theme ()
          "Sets the default theme I use for Windowed Emacs"
          (enable-theme 'base16-tomorrow-dark)
          (disable-theme 'firecode)
          (apply #'custom-set-faces windowed-faces)
          (fringe-mode 0)
          (scroll-bar-mode 1)
          (menu-bar-mode 1))

        (let ((is-fullscreen nil))
          (defun toggle-fullscreen ()
            (interactive)
            (if is-fullscreen
                (progn
                  (set-frame-parameter nil 'fullscreen nil)
                  (setq is-fullscreen nil)
                  (set-window-theme))
              (progn
                (set-frame-parameter nil 'fullscreen 'fullboth)
                (setq is-fullscreen t)
                (set-fullscreen-theme)))))

        (powerline-center-theme)
        (load-theme 'base16-tomorrow-dark)
        (set-window-theme)
        (set-default-window-size)
        (global-set-key (kbd "<f11>") 'toggle-fullscreen)))
#+END_SRC

What this does is it allows me to toggle between two style
configurations, one for fullscreen mode, the other for windowed with
the [F11] key.

** Expand Region
Expand Region is a very handy package for selecting arbitrary blocks
of text, be it code or whatever.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Expand region
  (require 'expand-region)
  (global-set-key (kbd "s-SPC") 'er/expand-region)
  (global-set-key (kbd "s-S-SPC") 'er/contract-region)
#+END_SRC

** Multiple Cursors
From the famous [[https://www.youtube.com/watch?v=jNa3axo40qM][Emacs Rocks video]] where it was introduced to the
masses, my configuration for this super-handy mode (Pretty much just
keybindings):

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Multiple-cursors
  (require 'multiple-cursors)
  (global-set-key (kbd "s-s") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-s-s") 'mc/mark-all-like-this)
  (global-set-key (kbd "M-s-s") 'mc/mark-next-symbol-like-this)
  (global-set-key (kbd "s-S") 'mc/mark-sgml-tag-pair)
#+END_SRC

** Projectile
Another really handy usability mode: Projectile!

I use Projectile with Helm to browse to files in the current (Or any)
project really fast:
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Projectile
  (require 'grizzl)
  (setq projectile-enable-caching t)
  (setq projectile-completion-system 'grizzl)
  (global-set-key (kbd "s-f") 'helm-projectile)
  (global-set-key (kbd "C-s-f") 'helm-projectile-all)
#+END_SRC

** Language mode setup
Following are the package-loaded language support configurations:

*** Ruby
#+BEGIN_SRC emacs-lisp :tangle yes :eval no
  ;; Ruby support
#+END_SRC

The default Ruby mode in Emacs is pretty good, partially because it
was [[http://www.slideshare.net/yukihiro_matz/how-emacs-changed-my-life][written by Matz himself.]] But there is still room for improvement:

First off, when =ruby-mode= is loaded, we also want to load
=robe-mode=, which allows for using an interactive Ruby instance for
completion...

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'ruby-mode-hook 'robe-mode)
#+END_SRC

And for error checking, we use =flymake-ruby=:
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'ruby-mode-hook 'flymake-ruby-load)
#+END_SRC

There is an Enhanced Ruby Mode =enh-ruby=, though it is a bit finicky
currently, so I don't load it by default... But for the times I do
use it, I have defined this hook to configure it to use =robe-mode=
like normal Ruby mode and set up a bunch of =autocomplete= sources
for code assist:
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'enh-ruby-mode-hook
            (lambda ()
              (robe-mode)
              (add-to-list 'ac-sources 'ac-source-robe)
              (add-to-list 'ac-sources 'ac-source-rsense-method)
              (add-to-list 'ac-sources 'ac-source-rsense-constant)))
#+END_SRC

*** Python
I don't really write Python, but for the times I do, Jedi is neat:
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Jedi, for Python sweetness
  (add-hook 'python-mode-hook
            (lambda ()
              (jedi:ac-setup)
              (setq jedi:complete-on-dot t)))
#+END_SRC

*** JavaScript
#+BEGIN_SRC emacs-lisp :tangle yes :eval no
  ;; JavaScript
#+END_SRC
The support for JavaScript in Emacs is ridiculous. We have an entire
parser in the =js2-mode= package, which is very well-written.

#+BEGIN_SRC emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
#+END_SRC

And using this parser, we get things like =js2-refactor=, which
allows for advanced automatic refactoring like renaming variables and
extracting code blocks with intelligent attention to scope:

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'js2-refactor)
#+END_SRC

There is also great =autocomplete= support with =ac-js2=... And that
allows for scope-intelligent jumping to definitions:

#+BEGIN_SRC emacs-lisp :tangle yes
    (add-hook 'js2-mode-hook
          (lambda ()
            (ac-js2-mode)
            (local-set-key (kbd "s-<f3>") #'ac-js2-jump-to-definition)))
#+END_SRC

And even without =js2=, we still have external tools like =jshint=
which are integrated with =flymake=:
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'flymake-jshint)
#+END_SRC

*** Java
I don't do much Java in Emacs, that generally is the job of Eclipse
because of its super-intelligent support, integration with
everything, and ridiculous debugger capabilities... But when I
do... I only have one real tweak to make:

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Java
  (add-hook 'java-mode-hook
            (lambda ()
              ;; Because these tend to be a lot longer than 80 width
              ;; and wrapping is ugly.
              (toggle-truncate-lines t)))
#+END_SRC

*** C and C+
Emacs' [[info:Semantic][Semantic]] mode is really good at C... I have not tested it
extensively with C++ though.

But with it, we get definition jumping and some quite intelligent
=autocomplete=... So I simply define the jumping keybinding, the
=autocomplete= sources, and add it to both C and C++ modes as hooks:

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; C and C++
  (defun c-modes-hook ()
    (semantic-mode)
    (local-set-key (kbd "s-<f3>") #'semantic-ia-fast-jump)
    (setq ac-sources '(ac-source-semantic
               ac-source-yasnippet)))
  (add-hook 'c-mode-hook 'c-modes-hook)
  (add-hook 'c++-mode-hook 'c-modes-hook)
#+END_SRC

*** Common Lisp
The Common Lisp setup is largely just setting up Slime and Slime's
=autocomplete= source according to [[https://github.com/slime/slime][their Github page]].
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Common Lisp
  ;; Set your lisp system and, optionally, some contribs Common Lisp
  (setq slime-contribs '(slime-fancy slime-asdf))
  (add-hook 'slime-mode-hook 'set-up-slime-ac)
  (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
  (eval-after-load "auto-complete"
    '(add-to-list 'ac-modes 'slime-repl-mode))
#+END_SRC

Nothing really special here.

*** ELISP
#+BEGIN_SRC emacs-lisp :tangle yes :eval no
  ;; ELISP
#+END_SRC
My ELISP configuration is largely just setting up =erefactor= and then
adding it to the three ELISP modes.

So first I require the package:
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'erefactor)
#+END_SRC

Then I define a hook that turns on =erefactor='s scope highlighting,
=eldoc-mode=, and defines a key for to start refactoring:

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Hook for all ELISP modes
  (defun el-hook ()
    (define-key emacs-lisp-mode-map "\C-c\C-v" erefactor-map)
    (erefactor-lazy-highlight-turn-on)
    (eldoc-mode t))
#+END_SRC

Then I simply assign the function as a hook for all of the ELISP
modes:
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; And assigning to said modes
  (add-hook 'emacs-lisp-mode-hook 'el-hook)
  (add-hook 'lisp-interaction-mode-hook 'el-hook)
  (add-hook 'ielm-mode-hook 'el-hook)
#+END_SRC

*** Clojure
All I do for Clojure is turn on =eldoc-mode=. The rest is handled by
CIDER:

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; CIDER, Clojure
  (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)
#+END_SRC

*** HTML, JSP, PHP, and so on...
For most markup-centric web development, I start up =web-mode=:

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Web Mode for HTML, JSPs, etc...
  (add-to-list 'auto-mode-alist '("\\.[sj]?html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.phtml$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.php[34]?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb$" . web-mode))
  (setq web-mode-engines-alist  '(("jsp" . "\\.tag\\'")))
#+END_SRC

I also start up [[http://emmet.io/][Emmet]] for =web-mode=, any =sgml-mode= derivative, and
for =css-mode=...

I also have a few other =web-mode= tweaks in the =web-mode-hook= I
define.
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun web-mode-hook ()
    "Hooks for Web mode."
    (setq web-mode-html-offset 2)
    (setq web-mode-css-offset 2)
    (setq web-mode-script-offset 2)
    (emmet-mode 1)
    (setq emmet-indentation 2)
    (toggle-truncate-lines t)
    (yas-minor-mode 1))
  (add-hook 'web-mode-hook 'web-mode-hook)
  (add-hook 'sgml-mode-hook 'ac-emmet-html-setup)
  (add-hook 'css-mode-hook 'ac-emmet-css-setup)
#+END_SRC

*** SQL
Emacs seems to fail at escaping backslashes in SQL files... So I have
slightly modified the syntax entry for the backslash character in SQL
files so it acts like a proper escape:
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; SQL, fix buffer escaping
  (add-hook 'sql-mode-hook
            (lambda ()
              (modify-syntax-entry ?\\ "\\" sql-mode-syntax-table)))
#+END_SRC

** Org Mode
Org mode gets quite a few updates through the package manager, so I
have moved my default Org configuration into the package hook.

This includes support for spell checking, grammar checking, tangling
source files from Org mode, =auto-fill=, and syntax coloring:

#+BEGIN_SRC emacs-lisp :tangle yes
    ;; Org mode
    (require 'org-install)
    (require 'ob-tangle)
    (add-hook
     'org-mode-hook
     (lambda ()
       (progn
         (flyspell-mode t)
         (auto-fill-mode t)
         (require 'org-latex)
         (setq-default indent-tabs-mode nil)
         (setq org-src-fontify-natively t)
         (setq org-export-latex-listings 'minted)

         ;; LanguageTool setup
         (require 'langtool))))
#+END_SRC

** Starting global package modes
#+BEGIN_SRC emacs-lisp :tangle yes :eval no
  ;; Start global package modes
#+END_SRC

There are a few modes that I want available everywhere... Such as
=autocomplete=:
#+BEGIN_SRC emacs-lisp :tangle yes
  (ac-config-default)
  (add-to-list 'ac-modes 'web-mode)
#+END_SRC

I added =web-mode= to the =ac-modes= list because I think =ac-modes=
is set when you start =autocomplete= with =ac-config-default=.

I also want to enable Projectile everywhere, because jumping between
files fast is very handy:
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Enable projectile
  (projectile-global-mode)
#+END_SRC

And since that is how I end the package hook, so lets close it:
#+BEGIN_SRC emacs-lisp :tangle yes :eval no
  )
#+END_SRC

* Setting the the package hook
Now that the package configuration hook is complete, we can assign it
like so:
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Load the above hook after the package manager has finished doing its thing
  (add-hook 'after-init-hook 'package-config)
#+END_SRC

* Variables
#+BEGIN_SRC emacs-lisp :tangle yes :eval no
  ;;;; Variables
#+END_SRC
There are some variables that I want to =setq= because I don't want
to have to customize them from their defaults.

** Lock Files
I really don't like Emacs lockfiles... They are annoying and mess up
an otherwise clean folder:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq create-lockfiles nil) ;; Nasty at times
#+END_SRC

** Tabs vs Spaces: The endless war
I am on the spaces side, because tab width screws up formatting
hardcore on things like Github if you want to do granular spacing and
their tabs are different from yours:
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default indent-tabs-mode nil) ;; Screws up in other editors and Github
#+END_SRC

Come at me bro.

* Global keybindings
#+BEGIN_SRC emacs-lisp :tangle yes
  ;;;; Custom keybindings
#+END_SRC

There are a few keybindings that I want globally in Emacs, for
example, =ace-jump-mode= is very handy for navigation regardless of
mode:

#+BEGIN_SRC emacs-lisp :tangle yes
  (define-key global-map (kbd "s-/") 'ace-jump-mode)
  (define-key global-map (kbd "s-?") 'ace-jump-char-mode)
#+END_SRC

I also generally like having a compile command as [F5]:
#+BEGIN_SRC emacs-lisp :tangle yes
  (define-key global-map (kbd "<f5>") 'compile)
#+END_SRC

No, compiling is not always relevant, but a quick command-line is
useful in even those times.

* Auto-backup config
Stolen from [[http://emacswiki.org/emacs/BackupDirectory][here]]... Very useful to have backup files not mes sup the
current folder, and yet still exist:
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Auto-backups
  (setq backup-by-copying t      ; don't clobber symlinks
        backup-directory-alist
        '(("." . "~/.saves"))    ; don't litter my fs tree
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)       ; use versioned backups
  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC

* Starting global modes
#+BEGIN_SRC emacs-lisp :tangle yes :eval no
  ;; Start global modes
#+END_SRC
This is the section where I enable global modes that are not provided
by external packages like in the "[[Starting global package modes]]"
section...

I only really have one though, and that is =show-paren-mode=, which
is always useful in my experience:

#+BEGIN_SRC emacs-lisp :tangle yes
  (show-paren-mode)
#+END_SRC

* Metadata                                                         :noexport:
#  LocalWords:  elisp LocalWords Flymake padline modeline hidestars
#  LocalWords:  config http TLS tls alist Matz JSPs langtool
